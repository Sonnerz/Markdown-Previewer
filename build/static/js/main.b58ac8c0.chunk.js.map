{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Editor","props","className","id","value","text","onChange","type","Preview","dangerouslySetInnerHTML","__html","marked","breaks","sanitize","Header","Footer","Tools","onClick","App","state","defaultText","tool","handlerChange","bind","handlerClick","e","this","setState","target","preventDefault","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAKMA,EAAS,SAAAC,GACb,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,mBAAf,UACA,8BACEC,GAAG,SACHC,MAAOH,EAAMI,KACbC,SAAUL,EAAMK,SAChBC,KAAK,WAOPC,EAAU,SAAAP,GACd,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,mBAAf,WACA,yBACEC,GAAG,UACHM,wBAAyB,CAAEC,OAAQC,IAAOV,EAAMI,KAAM,CAAEO,QAAQ,EAAMC,UAAU,SAOlFC,EAAS,SAAAb,GACb,OAAO,yBAAKC,UAAU,cAAf,oBAIHa,EAAS,SAAAd,GACb,OAAO,yBAAKC,UAAU,UAAf,8BAIHc,EAAQ,SAAAf,GACZ,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,oBACb,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,wBAA6BF,UAAU,qBAA7E,MAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,wBAA6BF,UAAU,qBAA7E,MAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,wBAA6BF,UAAU,qBAA7E,MAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,mBAAwBF,UAAU,qBAAxE,QAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,mBAAwBF,UAAU,qBAAxE,UAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,wBAA4BF,UAAU,qBAA5E,SAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,iBAAsBF,UAAU,qBAAtE,aAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,kBAAuBF,UAAU,qBAAvE,YAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,kBAAuBF,UAAU,qBAAvE,qBAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,iCAAsCF,UAAU,qBAAtF,QAGA,4BAAQe,QAAShB,EAAMgB,QAASb,MAAM,uGAA4GF,UAAU,qBAA5J,YASFgB,E,YACJ,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXd,KAAMe,EACNC,KAAM,IAER,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,2EAULE,GACZC,KAAKC,SAAS,CACZtB,KAAMoB,EAAEG,OAAOxB,U,mCAINqB,GACXA,EAAEI,iBACFH,KAAKC,SAAS,CACZtB,KAAMqB,KAAKP,MAAMd,KAAOoB,EAAEG,OAAOxB,U,+BAKnC,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOa,QAASS,KAAKF,eACrB,yBAAKrB,GAAG,iBACN,kBAAC,EAAD,CAAQE,KAAMqB,KAAKP,MAAMd,KAAMC,SAAUoB,KAAKJ,gBAC9C,kBAAC,EAAD,CAASjB,KAAMqB,KAAKP,MAAMd,QAE5B,kBAAC,EAAD,W,GAjCUyB,IAAMC,WAuClBX,EAAW,2fAsBFF,ICvIKc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b58ac8c0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked';\n\n//Stateless component to render Editor\nconst Editor = props => {\n  return (\n    <div className=\"component-div\">\n      <div className=\"component-title\">Editor</div>\n      <textarea\n        id=\"editor\"\n        value={props.text}\n        onChange={props.onChange}\n        type=\"text\"\n      />\n    </div>\n  );\n};\n\n//Stateless component to render Preview\nconst Preview = props => {\n  return (\n    <div className=\"component-div\">\n      <div className=\"component-title\">Preview</div>\n      <div\n        id=\"preview\"\n        dangerouslySetInnerHTML={{ __html: marked(props.text, { breaks: true, sanitize: true }) }}\n      />\n    </div>\n  );\n};\n\n//Stateless component to render Header\nconst Header = props => {\n  return <div className=\"page-title\">Markdown Editor</div>;\n};\n\n//Stateless component to render Header\nconst Footer = props => {\n  return <div className=\"footer\">Markdown Editor &copy; 2019</div>;\n};\n\n//Stateless component to render Header\nconst Tools = props => {\n  return (\n    <div className=\"toolbar\">\n      <div className=\"button-container\">\n        <button onClick={props.onClick} value=\"### heading 1 text &#x00A;\" className=\"btn btn-secondary\">\n          h1\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"### heading 2 text &#x00A;\" className=\"btn btn-secondary\">\n          h2\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"### heading 3 text &#x00A;\" className=\"btn btn-secondary\">\n          h3\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"**Bold Text** &#x00A;\" className=\"btn btn-secondary\">\n          Bold\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"_Italic Text_ &#x00A;\" className=\"btn btn-secondary\">\n          Italic\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"> \tQuotation text &#x00A;\" className=\"btn btn-secondary\">\n          Quote\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"* List item &#x00A;\" className=\"btn btn-secondary\">\n          List item\n\t\t\t</button>\n        <button onClick={props.onClick} value=\" * List item &#x00A;\" className=\"btn btn-secondary\">\n          Sub Item\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"1. List item &#x00A;\" className=\"btn btn-secondary\">\n          Ordered List item\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"[GitHub](http://github.com) &#x00A;\" className=\"btn btn-secondary\">\n          Link\n\t\t\t</button>\n        <button onClick={props.onClick} value=\"![Google Logo](https://www.google.ie/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) &#x00A;\" className=\"btn btn-secondary\">\n          Image\n\t\t\t</button>\n      </div>\n    </div>\n  );\n};\n\n//Stateful Class component to render App - Editor and Preview\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: defaultText,\n      tool: \"\"\n    };\n    this.handlerChange = this.handlerChange.bind(this);\n    this.handlerClick = this.handlerClick.bind(this);\n  }\n\n  handlerChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  handlerClick(e) {\n    e.preventDefault();\n    this.setState({\n      text: this.state.text + e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Tools onClick={this.handlerClick} />\n        <div id=\"app-container\">\n          <Editor text={this.state.text} onChange={this.handlerChange} />\n          <Preview text={this.state.text} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nconst defaultText = `\n# This is a h1 \\n\\\n\n## This is a h2 \\n\n[I'm an inline-style link](https://www.google.com) \\n\\\n* This is a list item \\n\\\n\n**This is bold text** \\n\\\n\n> This is for a quotation.\\n\\\n\n\nI can add inline code like this:  \\`<p></p>\\`\n\n\\`\\`\\`javascript\n// multiline code block can be added using 3 back ticks\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\\`\\`\\` \\n\\\nThis is how to add an image:   ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") \\n\\\n`;\n\nexport default App;\n\n\n\n//https://marked.js.org/#/README.md#usage","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}